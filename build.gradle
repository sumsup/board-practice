plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.8'

	// 스프링 디펜던시들의 버전을 현재 스프링 버전과 맞게 자동으로 관리해주는 플러그인 이다.
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
}

group = 'com.board'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// Repository에 애노테이션 붙이면 자동으로 CRUD REST API 생성됨.
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	// 미리 만들어진 서비스로 웹에서 동작 테스트 가능하도록 함.
	implementation 'org.springframework.data:spring-data-rest-hal-explorer'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	// 주의 : thymeleaf-extra는 start.spring.io에서 의존성에 spring security랑 thymeleaf를 동시에 넣었을 때만 생성됨.
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
	testImplementation 'org.springframework.security:spring-security-test'

	// queryDSL 설정
	implementation "com.querydsl:querydsl-jpa"
	implementation "com.querydsl:querydsl-core"
	implementation "com.querydsl:querydsl-collections"

	// querydsl-apt의 의존성 추가는 버전 정보가 중간에 들어가 있어서 spring dependency management 가 버전정보를 제공 못함.
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" // querydsl JPAAnnotationProcessor 사용 지정
	annotationProcessor "jakarta.annotation:jakarta.annotation-api" // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
	annotationProcessor "jakarta.persistence:jakarta.persistence-api" // java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드


	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.postgresql:postgresql'

	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl Q클래스 설정부
// IDEA가 빌드하는 것과 gradle이 빌드하는 것을 일치 시킴. 두번 스캔 하지 않도록.
// IDEA는 generated 폴더에 Q클래스를 생성. gradle는 build 폴더에 생성.
// 서로 불일치 하는데서 오는 불편을 해소하기 위해서 추가 해줌.
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}